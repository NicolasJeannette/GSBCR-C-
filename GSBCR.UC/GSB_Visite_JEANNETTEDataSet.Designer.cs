//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GSBCR.UC {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GSB_Visite_JEANNETTEDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GSB_Visite_JEANNETTEDataSet : global::System.Data.DataSet {
        
        private RAPPORT_VISITEDataTable tableRAPPORT_VISITE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GSB_Visite_JEANNETTEDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected GSB_Visite_JEANNETTEDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RAPPORT_VISITE"] != null)) {
                    base.Tables.Add(new RAPPORT_VISITEDataTable(ds.Tables["RAPPORT_VISITE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RAPPORT_VISITEDataTable RAPPORT_VISITE {
            get {
                return this.tableRAPPORT_VISITE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            GSB_Visite_JEANNETTEDataSet cln = ((GSB_Visite_JEANNETTEDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RAPPORT_VISITE"] != null)) {
                    base.Tables.Add(new RAPPORT_VISITEDataTable(ds.Tables["RAPPORT_VISITE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableRAPPORT_VISITE = ((RAPPORT_VISITEDataTable)(base.Tables["RAPPORT_VISITE"]));
            if ((initTable == true)) {
                if ((this.tableRAPPORT_VISITE != null)) {
                    this.tableRAPPORT_VISITE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "GSB_Visite_JEANNETTEDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GSB_Visite_JEANNETTEDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRAPPORT_VISITE = new RAPPORT_VISITEDataTable();
            base.Tables.Add(this.tableRAPPORT_VISITE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRAPPORT_VISITE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GSB_Visite_JEANNETTEDataSet ds = new GSB_Visite_JEANNETTEDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RAPPORT_VISITERowChangeEventHandler(object sender, RAPPORT_VISITERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RAPPORT_VISITEDataTable : global::System.Data.TypedTableBase<RAPPORT_VISITERow> {
            
            private global::System.Data.DataColumn columnRAP_MATRICULE;
            
            private global::System.Data.DataColumn columnRAP_NUM;
            
            private global::System.Data.DataColumn columnRAP_PRANUM;
            
            private global::System.Data.DataColumn columnRAP_DATE;
            
            private global::System.Data.DataColumn columnRAP_DATVISIT;
            
            private global::System.Data.DataColumn columnRAP_ETAT;
            
            private global::System.Data.DataColumn columnRAP_CONFIANCE;
            
            private global::System.Data.DataColumn columnRAP_BILAN;
            
            private global::System.Data.DataColumn columnRAP_MOTIF;
            
            private global::System.Data.DataColumn columnRAP_MOTIFAUTRE;
            
            private global::System.Data.DataColumn columnRAP_NOMREMPL;
            
            private global::System.Data.DataColumn columnRAP_PNOMREMPL;
            
            private global::System.Data.DataColumn columnRAP_MED1;
            
            private global::System.Data.DataColumn columnRAP_MED2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITEDataTable() {
                this.TableName = "RAPPORT_VISITE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RAPPORT_VISITEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RAPPORT_VISITEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_MATRICULEColumn {
                get {
                    return this.columnRAP_MATRICULE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_NUMColumn {
                get {
                    return this.columnRAP_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_PRANUMColumn {
                get {
                    return this.columnRAP_PRANUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_DATEColumn {
                get {
                    return this.columnRAP_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_DATVISITColumn {
                get {
                    return this.columnRAP_DATVISIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_ETATColumn {
                get {
                    return this.columnRAP_ETAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_CONFIANCEColumn {
                get {
                    return this.columnRAP_CONFIANCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_BILANColumn {
                get {
                    return this.columnRAP_BILAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_MOTIFColumn {
                get {
                    return this.columnRAP_MOTIF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_MOTIFAUTREColumn {
                get {
                    return this.columnRAP_MOTIFAUTRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_NOMREMPLColumn {
                get {
                    return this.columnRAP_NOMREMPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_PNOMREMPLColumn {
                get {
                    return this.columnRAP_PNOMREMPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_MED1Column {
                get {
                    return this.columnRAP_MED1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RAP_MED2Column {
                get {
                    return this.columnRAP_MED2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERow this[int index] {
                get {
                    return ((RAPPORT_VISITERow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RAPPORT_VISITERowChangeEventHandler RAPPORT_VISITERowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RAPPORT_VISITERowChangeEventHandler RAPPORT_VISITERowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RAPPORT_VISITERowChangeEventHandler RAPPORT_VISITERowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RAPPORT_VISITERowChangeEventHandler RAPPORT_VISITERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRAPPORT_VISITERow(RAPPORT_VISITERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERow AddRAPPORT_VISITERow(string RAP_MATRICULE, int RAP_NUM, short RAP_PRANUM, System.DateTime RAP_DATE, System.DateTime RAP_DATVISIT, string RAP_ETAT, string RAP_CONFIANCE, string RAP_BILAN, string RAP_MOTIF, string RAP_MOTIFAUTRE, string RAP_NOMREMPL, string RAP_PNOMREMPL, string RAP_MED1, string RAP_MED2) {
                RAPPORT_VISITERow rowRAPPORT_VISITERow = ((RAPPORT_VISITERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RAP_MATRICULE,
                        RAP_NUM,
                        RAP_PRANUM,
                        RAP_DATE,
                        RAP_DATVISIT,
                        RAP_ETAT,
                        RAP_CONFIANCE,
                        RAP_BILAN,
                        RAP_MOTIF,
                        RAP_MOTIFAUTRE,
                        RAP_NOMREMPL,
                        RAP_PNOMREMPL,
                        RAP_MED1,
                        RAP_MED2};
                rowRAPPORT_VISITERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRAPPORT_VISITERow);
                return rowRAPPORT_VISITERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERow FindByRAP_MATRICULERAP_NUM(string RAP_MATRICULE, int RAP_NUM) {
                return ((RAPPORT_VISITERow)(this.Rows.Find(new object[] {
                            RAP_MATRICULE,
                            RAP_NUM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                RAPPORT_VISITEDataTable cln = ((RAPPORT_VISITEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RAPPORT_VISITEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRAP_MATRICULE = base.Columns["RAP_MATRICULE"];
                this.columnRAP_NUM = base.Columns["RAP_NUM"];
                this.columnRAP_PRANUM = base.Columns["RAP_PRANUM"];
                this.columnRAP_DATE = base.Columns["RAP_DATE"];
                this.columnRAP_DATVISIT = base.Columns["RAP_DATVISIT"];
                this.columnRAP_ETAT = base.Columns["RAP_ETAT"];
                this.columnRAP_CONFIANCE = base.Columns["RAP_CONFIANCE"];
                this.columnRAP_BILAN = base.Columns["RAP_BILAN"];
                this.columnRAP_MOTIF = base.Columns["RAP_MOTIF"];
                this.columnRAP_MOTIFAUTRE = base.Columns["RAP_MOTIFAUTRE"];
                this.columnRAP_NOMREMPL = base.Columns["RAP_NOMREMPL"];
                this.columnRAP_PNOMREMPL = base.Columns["RAP_PNOMREMPL"];
                this.columnRAP_MED1 = base.Columns["RAP_MED1"];
                this.columnRAP_MED2 = base.Columns["RAP_MED2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRAP_MATRICULE = new global::System.Data.DataColumn("RAP_MATRICULE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_MATRICULE);
                this.columnRAP_NUM = new global::System.Data.DataColumn("RAP_NUM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_NUM);
                this.columnRAP_PRANUM = new global::System.Data.DataColumn("RAP_PRANUM", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_PRANUM);
                this.columnRAP_DATE = new global::System.Data.DataColumn("RAP_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_DATE);
                this.columnRAP_DATVISIT = new global::System.Data.DataColumn("RAP_DATVISIT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_DATVISIT);
                this.columnRAP_ETAT = new global::System.Data.DataColumn("RAP_ETAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_ETAT);
                this.columnRAP_CONFIANCE = new global::System.Data.DataColumn("RAP_CONFIANCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_CONFIANCE);
                this.columnRAP_BILAN = new global::System.Data.DataColumn("RAP_BILAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_BILAN);
                this.columnRAP_MOTIF = new global::System.Data.DataColumn("RAP_MOTIF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_MOTIF);
                this.columnRAP_MOTIFAUTRE = new global::System.Data.DataColumn("RAP_MOTIFAUTRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_MOTIFAUTRE);
                this.columnRAP_NOMREMPL = new global::System.Data.DataColumn("RAP_NOMREMPL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_NOMREMPL);
                this.columnRAP_PNOMREMPL = new global::System.Data.DataColumn("RAP_PNOMREMPL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_PNOMREMPL);
                this.columnRAP_MED1 = new global::System.Data.DataColumn("RAP_MED1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_MED1);
                this.columnRAP_MED2 = new global::System.Data.DataColumn("RAP_MED2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAP_MED2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRAP_MATRICULE,
                                this.columnRAP_NUM}, true));
                this.columnRAP_MATRICULE.AllowDBNull = false;
                this.columnRAP_MATRICULE.MaxLength = 10;
                this.columnRAP_NUM.AllowDBNull = false;
                this.columnRAP_PRANUM.AllowDBNull = false;
                this.columnRAP_DATE.AllowDBNull = false;
                this.columnRAP_DATVISIT.AllowDBNull = false;
                this.columnRAP_ETAT.AllowDBNull = false;
                this.columnRAP_ETAT.MaxLength = 1;
                this.columnRAP_CONFIANCE.AllowDBNull = false;
                this.columnRAP_CONFIANCE.MaxLength = 1;
                this.columnRAP_BILAN.AllowDBNull = false;
                this.columnRAP_BILAN.MaxLength = 255;
                this.columnRAP_MOTIF.AllowDBNull = false;
                this.columnRAP_MOTIF.MaxLength = 2;
                this.columnRAP_MOTIFAUTRE.MaxLength = 25;
                this.columnRAP_NOMREMPL.MaxLength = 25;
                this.columnRAP_PNOMREMPL.MaxLength = 30;
                this.columnRAP_MED1.MaxLength = 10;
                this.columnRAP_MED2.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERow NewRAPPORT_VISITERow() {
                return ((RAPPORT_VISITERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RAPPORT_VISITERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(RAPPORT_VISITERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RAPPORT_VISITERowChanged != null)) {
                    this.RAPPORT_VISITERowChanged(this, new RAPPORT_VISITERowChangeEvent(((RAPPORT_VISITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RAPPORT_VISITERowChanging != null)) {
                    this.RAPPORT_VISITERowChanging(this, new RAPPORT_VISITERowChangeEvent(((RAPPORT_VISITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RAPPORT_VISITERowDeleted != null)) {
                    this.RAPPORT_VISITERowDeleted(this, new RAPPORT_VISITERowChangeEvent(((RAPPORT_VISITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RAPPORT_VISITERowDeleting != null)) {
                    this.RAPPORT_VISITERowDeleting(this, new RAPPORT_VISITERowChangeEvent(((RAPPORT_VISITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRAPPORT_VISITERow(RAPPORT_VISITERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GSB_Visite_JEANNETTEDataSet ds = new GSB_Visite_JEANNETTEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RAPPORT_VISITEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RAPPORT_VISITERow : global::System.Data.DataRow {
            
            private RAPPORT_VISITEDataTable tableRAPPORT_VISITE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RAPPORT_VISITERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRAPPORT_VISITE = ((RAPPORT_VISITEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_MATRICULE {
                get {
                    return ((string)(this[this.tableRAPPORT_VISITE.RAP_MATRICULEColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_MATRICULEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RAP_NUM {
                get {
                    return ((int)(this[this.tableRAPPORT_VISITE.RAP_NUMColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short RAP_PRANUM {
                get {
                    return ((short)(this[this.tableRAPPORT_VISITE.RAP_PRANUMColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_PRANUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime RAP_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableRAPPORT_VISITE.RAP_DATEColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime RAP_DATVISIT {
                get {
                    return ((global::System.DateTime)(this[this.tableRAPPORT_VISITE.RAP_DATVISITColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_DATVISITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_ETAT {
                get {
                    return ((string)(this[this.tableRAPPORT_VISITE.RAP_ETATColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_ETATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_CONFIANCE {
                get {
                    return ((string)(this[this.tableRAPPORT_VISITE.RAP_CONFIANCEColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_CONFIANCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_BILAN {
                get {
                    return ((string)(this[this.tableRAPPORT_VISITE.RAP_BILANColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_BILANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_MOTIF {
                get {
                    return ((string)(this[this.tableRAPPORT_VISITE.RAP_MOTIFColumn]));
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_MOTIFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_MOTIFAUTRE {
                get {
                    try {
                        return ((string)(this[this.tableRAPPORT_VISITE.RAP_MOTIFAUTREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'RAP_MOTIFAUTRE\' dans la table \'RAPPORT_VISITE\' est DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_MOTIFAUTREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_NOMREMPL {
                get {
                    try {
                        return ((string)(this[this.tableRAPPORT_VISITE.RAP_NOMREMPLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'RAP_NOMREMPL\' dans la table \'RAPPORT_VISITE\' est DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_NOMREMPLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_PNOMREMPL {
                get {
                    try {
                        return ((string)(this[this.tableRAPPORT_VISITE.RAP_PNOMREMPLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'RAP_PNOMREMPL\' dans la table \'RAPPORT_VISITE\' est DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_PNOMREMPLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_MED1 {
                get {
                    try {
                        return ((string)(this[this.tableRAPPORT_VISITE.RAP_MED1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'RAP_MED1\' dans la table \'RAPPORT_VISITE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_MED1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RAP_MED2 {
                get {
                    try {
                        return ((string)(this[this.tableRAPPORT_VISITE.RAP_MED2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'RAP_MED2\' dans la table \'RAPPORT_VISITE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableRAPPORT_VISITE.RAP_MED2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRAP_MOTIFAUTRENull() {
                return this.IsNull(this.tableRAPPORT_VISITE.RAP_MOTIFAUTREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRAP_MOTIFAUTRENull() {
                this[this.tableRAPPORT_VISITE.RAP_MOTIFAUTREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRAP_NOMREMPLNull() {
                return this.IsNull(this.tableRAPPORT_VISITE.RAP_NOMREMPLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRAP_NOMREMPLNull() {
                this[this.tableRAPPORT_VISITE.RAP_NOMREMPLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRAP_PNOMREMPLNull() {
                return this.IsNull(this.tableRAPPORT_VISITE.RAP_PNOMREMPLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRAP_PNOMREMPLNull() {
                this[this.tableRAPPORT_VISITE.RAP_PNOMREMPLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRAP_MED1Null() {
                return this.IsNull(this.tableRAPPORT_VISITE.RAP_MED1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRAP_MED1Null() {
                this[this.tableRAPPORT_VISITE.RAP_MED1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRAP_MED2Null() {
                return this.IsNull(this.tableRAPPORT_VISITE.RAP_MED2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRAP_MED2Null() {
                this[this.tableRAPPORT_VISITE.RAP_MED2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RAPPORT_VISITERowChangeEvent : global::System.EventArgs {
            
            private RAPPORT_VISITERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERowChangeEvent(RAPPORT_VISITERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RAPPORT_VISITERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GSBCR.UC.GSB_Visite_JEANNETTEDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RAPPORT_VISITETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RAPPORT_VISITETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RAPPORT_VISITE";
            tableMapping.ColumnMappings.Add("RAP_MATRICULE", "RAP_MATRICULE");
            tableMapping.ColumnMappings.Add("RAP_NUM", "RAP_NUM");
            tableMapping.ColumnMappings.Add("RAP_PRANUM", "RAP_PRANUM");
            tableMapping.ColumnMappings.Add("RAP_DATE", "RAP_DATE");
            tableMapping.ColumnMappings.Add("RAP_DATVISIT", "RAP_DATVISIT");
            tableMapping.ColumnMappings.Add("RAP_ETAT", "RAP_ETAT");
            tableMapping.ColumnMappings.Add("RAP_CONFIANCE", "RAP_CONFIANCE");
            tableMapping.ColumnMappings.Add("RAP_BILAN", "RAP_BILAN");
            tableMapping.ColumnMappings.Add("RAP_MOTIF", "RAP_MOTIF");
            tableMapping.ColumnMappings.Add("RAP_MOTIFAUTRE", "RAP_MOTIFAUTRE");
            tableMapping.ColumnMappings.Add("RAP_NOMREMPL", "RAP_NOMREMPL");
            tableMapping.ColumnMappings.Add("RAP_PNOMREMPL", "RAP_PNOMREMPL");
            tableMapping.ColumnMappings.Add("RAP_MED1", "RAP_MED1");
            tableMapping.ColumnMappings.Add("RAP_MED2", "RAP_MED2");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[RAPPORT_VISITE] WHERE (([RAP_MATRICULE] = @Original_RAP_MATRICULE) AND ([RAP_NUM] = @Original_RAP_NUM) AND ([RAP_PRANUM] = @Original_RAP_PRANUM) AND ([RAP_DATE] = @Original_RAP_DATE) AND ([RAP_DATVISIT] = @Original_RAP_DATVISIT) AND ([RAP_ETAT] = @Original_RAP_ETAT) AND ([RAP_CONFIANCE] = @Original_RAP_CONFIANCE) AND ([RAP_BILAN] = @Original_RAP_BILAN) AND ([RAP_MOTIF] = @Original_RAP_MOTIF) AND ((@IsNull_RAP_MOTIFAUTRE = 1 AND [RAP_MOTIFAUTRE] IS NULL) OR ([RAP_MOTIFAUTRE] = @Original_RAP_MOTIFAUTRE)) AND ((@IsNull_RAP_NOMREMPL = 1 AND [RAP_NOMREMPL] IS NULL) OR ([RAP_NOMREMPL] = @Original_RAP_NOMREMPL)) AND ((@IsNull_RAP_PNOMREMPL = 1 AND [RAP_PNOMREMPL] IS NULL) OR ([RAP_PNOMREMPL] = @Original_RAP_PNOMREMPL)) AND ((@IsNull_RAP_MED1 = 1 AND [RAP_MED1] IS NULL) OR ([RAP_MED1] = @Original_RAP_MED1)) AND ((@IsNull_RAP_MED2 = 1 AND [RAP_MED2] IS NULL) OR ([RAP_MED2] = @Original_RAP_MED2)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MATRICULE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MATRICULE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_NUM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NUM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_PRANUM", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PRANUM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_DATVISIT", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATVISIT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_ETAT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_ETAT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_CONFIANCE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_CONFIANCE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_BILAN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_BILAN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MOTIF", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MOTIFAUTRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MOTIFAUTRE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_NOMREMPL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_NOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_PNOMREMPL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_PNOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MED1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MED1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MED2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MED2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[RAPPORT_VISITE] ([RAP_MATRICULE], [RAP_NUM], [RAP_PRANUM], [RAP_DATE], [RAP_DATVISIT], [RAP_ETAT], [RAP_CONFIANCE], [RAP_BILAN], [RAP_MOTIF], [RAP_MOTIFAUTRE], [RAP_NOMREMPL], [RAP_PNOMREMPL], [RAP_MED1], [RAP_MED2]) VALUES (@RAP_MATRICULE, @RAP_NUM, @RAP_PRANUM, @RAP_DATE, @RAP_DATVISIT, @RAP_ETAT, @RAP_CONFIANCE, @RAP_BILAN, @RAP_MOTIF, @RAP_MOTIFAUTRE, @RAP_NOMREMPL, @RAP_PNOMREMPL, @RAP_MED1, @RAP_MED2);
SELECT RAP_MATRICULE, RAP_NUM, RAP_PRANUM, RAP_DATE, RAP_DATVISIT, RAP_ETAT, RAP_CONFIANCE, RAP_BILAN, RAP_MOTIF, RAP_MOTIFAUTRE, RAP_NOMREMPL, RAP_PNOMREMPL, RAP_MED1, RAP_MED2 FROM RAPPORT_VISITE WHERE (RAP_MATRICULE = @RAP_MATRICULE) AND (RAP_NUM = @RAP_NUM)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MATRICULE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MATRICULE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_NUM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NUM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_PRANUM", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PRANUM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_DATVISIT", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATVISIT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_ETAT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_ETAT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_CONFIANCE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_CONFIANCE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_BILAN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_BILAN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MOTIF", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MOTIFAUTRE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_NOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_PNOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MED1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MED2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RAPPORT_VISITE] SET [RAP_MATRICULE] = @RAP_MATRICULE, [RAP_NUM] = @" +
                "RAP_NUM, [RAP_PRANUM] = @RAP_PRANUM, [RAP_DATE] = @RAP_DATE, [RAP_DATVISIT] = @R" +
                "AP_DATVISIT, [RAP_ETAT] = @RAP_ETAT, [RAP_CONFIANCE] = @RAP_CONFIANCE, [RAP_BILA" +
                "N] = @RAP_BILAN, [RAP_MOTIF] = @RAP_MOTIF, [RAP_MOTIFAUTRE] = @RAP_MOTIFAUTRE, [" +
                "RAP_NOMREMPL] = @RAP_NOMREMPL, [RAP_PNOMREMPL] = @RAP_PNOMREMPL, [RAP_MED1] = @R" +
                "AP_MED1, [RAP_MED2] = @RAP_MED2 WHERE (([RAP_MATRICULE] = @Original_RAP_MATRICUL" +
                "E) AND ([RAP_NUM] = @Original_RAP_NUM) AND ([RAP_PRANUM] = @Original_RAP_PRANUM)" +
                " AND ([RAP_DATE] = @Original_RAP_DATE) AND ([RAP_DATVISIT] = @Original_RAP_DATVI" +
                "SIT) AND ([RAP_ETAT] = @Original_RAP_ETAT) AND ([RAP_CONFIANCE] = @Original_RAP_" +
                "CONFIANCE) AND ([RAP_BILAN] = @Original_RAP_BILAN) AND ([RAP_MOTIF] = @Original_" +
                "RAP_MOTIF) AND ((@IsNull_RAP_MOTIFAUTRE = 1 AND [RAP_MOTIFAUTRE] IS NULL) OR ([R" +
                "AP_MOTIFAUTRE] = @Original_RAP_MOTIFAUTRE)) AND ((@IsNull_RAP_NOMREMPL = 1 AND [" +
                "RAP_NOMREMPL] IS NULL) OR ([RAP_NOMREMPL] = @Original_RAP_NOMREMPL)) AND ((@IsNu" +
                "ll_RAP_PNOMREMPL = 1 AND [RAP_PNOMREMPL] IS NULL) OR ([RAP_PNOMREMPL] = @Origina" +
                "l_RAP_PNOMREMPL)) AND ((@IsNull_RAP_MED1 = 1 AND [RAP_MED1] IS NULL) OR ([RAP_ME" +
                "D1] = @Original_RAP_MED1)) AND ((@IsNull_RAP_MED2 = 1 AND [RAP_MED2] IS NULL) OR" +
                " ([RAP_MED2] = @Original_RAP_MED2)));\r\nSELECT RAP_MATRICULE, RAP_NUM, RAP_PRANUM" +
                ", RAP_DATE, RAP_DATVISIT, RAP_ETAT, RAP_CONFIANCE, RAP_BILAN, RAP_MOTIF, RAP_MOT" +
                "IFAUTRE, RAP_NOMREMPL, RAP_PNOMREMPL, RAP_MED1, RAP_MED2 FROM RAPPORT_VISITE WHE" +
                "RE (RAP_MATRICULE = @RAP_MATRICULE) AND (RAP_NUM = @RAP_NUM)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MATRICULE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MATRICULE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_NUM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NUM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_PRANUM", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PRANUM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_DATVISIT", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATVISIT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_ETAT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_ETAT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_CONFIANCE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_CONFIANCE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_BILAN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_BILAN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MOTIF", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MOTIFAUTRE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_NOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_PNOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MED1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RAP_MED2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MATRICULE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MATRICULE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_NUM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NUM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_PRANUM", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PRANUM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_DATVISIT", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_DATVISIT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_ETAT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_ETAT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_CONFIANCE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_CONFIANCE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_BILAN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_BILAN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MOTIF", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MOTIFAUTRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MOTIFAUTRE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MOTIFAUTRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_NOMREMPL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_NOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_NOMREMPL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_PNOMREMPL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_PNOMREMPL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_PNOMREMPL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MED1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MED1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RAP_MED2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RAP_MED2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RAP_MED2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GSBCR.UC.Properties.Settings.Default.cnx;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RAP_MATRICULE, RAP_NUM, RAP_PRANUM, RAP_DATE, RAP_DATVISIT, RAP_ETAT, RAP_" +
                "CONFIANCE, RAP_BILAN, RAP_MOTIF, RAP_MOTIFAUTRE, RAP_NOMREMPL, RAP_PNOMREMPL, RA" +
                "P_MED1, RAP_MED2 FROM dbo.RAPPORT_VISITE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GSB_Visite_JEANNETTEDataSet.RAPPORT_VISITEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GSB_Visite_JEANNETTEDataSet.RAPPORT_VISITEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GSB_Visite_JEANNETTEDataSet.RAPPORT_VISITEDataTable dataTable = new GSB_Visite_JEANNETTEDataSet.RAPPORT_VISITEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GSB_Visite_JEANNETTEDataSet.RAPPORT_VISITEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GSB_Visite_JEANNETTEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RAPPORT_VISITE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_RAP_MATRICULE, int Original_RAP_NUM, short Original_RAP_PRANUM, System.DateTime Original_RAP_DATE, System.DateTime Original_RAP_DATVISIT, string Original_RAP_ETAT, string Original_RAP_CONFIANCE, string Original_RAP_BILAN, string Original_RAP_MOTIF, string Original_RAP_MOTIFAUTRE, string Original_RAP_NOMREMPL, string Original_RAP_PNOMREMPL, string Original_RAP_MED1, string Original_RAP_MED2) {
            if ((Original_RAP_MATRICULE == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_MATRICULE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_RAP_MATRICULE));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_RAP_NUM));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((short)(Original_RAP_PRANUM));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_RAP_DATE));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_RAP_DATVISIT));
            if ((Original_RAP_ETAT == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_ETAT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_RAP_ETAT));
            }
            if ((Original_RAP_CONFIANCE == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_CONFIANCE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_RAP_CONFIANCE));
            }
            if ((Original_RAP_BILAN == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_BILAN");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_RAP_BILAN));
            }
            if ((Original_RAP_MOTIF == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_MOTIF");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_RAP_MOTIF));
            }
            if ((Original_RAP_MOTIFAUTRE == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_RAP_MOTIFAUTRE));
            }
            if ((Original_RAP_NOMREMPL == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_RAP_NOMREMPL));
            }
            if ((Original_RAP_PNOMREMPL == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_RAP_PNOMREMPL));
            }
            if ((Original_RAP_MED1 == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_RAP_MED1));
            }
            if ((Original_RAP_MED2 == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_RAP_MED2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RAP_MATRICULE, int RAP_NUM, short RAP_PRANUM, System.DateTime RAP_DATE, System.DateTime RAP_DATVISIT, string RAP_ETAT, string RAP_CONFIANCE, string RAP_BILAN, string RAP_MOTIF, string RAP_MOTIFAUTRE, string RAP_NOMREMPL, string RAP_PNOMREMPL, string RAP_MED1, string RAP_MED2) {
            if ((RAP_MATRICULE == null)) {
                throw new global::System.ArgumentNullException("RAP_MATRICULE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RAP_MATRICULE));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RAP_NUM));
            this.Adapter.InsertCommand.Parameters[2].Value = ((short)(RAP_PRANUM));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(RAP_DATE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(RAP_DATVISIT));
            if ((RAP_ETAT == null)) {
                throw new global::System.ArgumentNullException("RAP_ETAT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(RAP_ETAT));
            }
            if ((RAP_CONFIANCE == null)) {
                throw new global::System.ArgumentNullException("RAP_CONFIANCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(RAP_CONFIANCE));
            }
            if ((RAP_BILAN == null)) {
                throw new global::System.ArgumentNullException("RAP_BILAN");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(RAP_BILAN));
            }
            if ((RAP_MOTIF == null)) {
                throw new global::System.ArgumentNullException("RAP_MOTIF");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(RAP_MOTIF));
            }
            if ((RAP_MOTIFAUTRE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(RAP_MOTIFAUTRE));
            }
            if ((RAP_NOMREMPL == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(RAP_NOMREMPL));
            }
            if ((RAP_PNOMREMPL == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(RAP_PNOMREMPL));
            }
            if ((RAP_MED1 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(RAP_MED1));
            }
            if ((RAP_MED2 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(RAP_MED2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RAP_MATRICULE, 
                    int RAP_NUM, 
                    short RAP_PRANUM, 
                    System.DateTime RAP_DATE, 
                    System.DateTime RAP_DATVISIT, 
                    string RAP_ETAT, 
                    string RAP_CONFIANCE, 
                    string RAP_BILAN, 
                    string RAP_MOTIF, 
                    string RAP_MOTIFAUTRE, 
                    string RAP_NOMREMPL, 
                    string RAP_PNOMREMPL, 
                    string RAP_MED1, 
                    string RAP_MED2, 
                    string Original_RAP_MATRICULE, 
                    int Original_RAP_NUM, 
                    short Original_RAP_PRANUM, 
                    System.DateTime Original_RAP_DATE, 
                    System.DateTime Original_RAP_DATVISIT, 
                    string Original_RAP_ETAT, 
                    string Original_RAP_CONFIANCE, 
                    string Original_RAP_BILAN, 
                    string Original_RAP_MOTIF, 
                    string Original_RAP_MOTIFAUTRE, 
                    string Original_RAP_NOMREMPL, 
                    string Original_RAP_PNOMREMPL, 
                    string Original_RAP_MED1, 
                    string Original_RAP_MED2) {
            if ((RAP_MATRICULE == null)) {
                throw new global::System.ArgumentNullException("RAP_MATRICULE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RAP_MATRICULE));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RAP_NUM));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(RAP_PRANUM));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(RAP_DATE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(RAP_DATVISIT));
            if ((RAP_ETAT == null)) {
                throw new global::System.ArgumentNullException("RAP_ETAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(RAP_ETAT));
            }
            if ((RAP_CONFIANCE == null)) {
                throw new global::System.ArgumentNullException("RAP_CONFIANCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(RAP_CONFIANCE));
            }
            if ((RAP_BILAN == null)) {
                throw new global::System.ArgumentNullException("RAP_BILAN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(RAP_BILAN));
            }
            if ((RAP_MOTIF == null)) {
                throw new global::System.ArgumentNullException("RAP_MOTIF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(RAP_MOTIF));
            }
            if ((RAP_MOTIFAUTRE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(RAP_MOTIFAUTRE));
            }
            if ((RAP_NOMREMPL == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(RAP_NOMREMPL));
            }
            if ((RAP_PNOMREMPL == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(RAP_PNOMREMPL));
            }
            if ((RAP_MED1 == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(RAP_MED1));
            }
            if ((RAP_MED2 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(RAP_MED2));
            }
            if ((Original_RAP_MATRICULE == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_MATRICULE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_RAP_MATRICULE));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_RAP_NUM));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(Original_RAP_PRANUM));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_RAP_DATE));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_RAP_DATVISIT));
            if ((Original_RAP_ETAT == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_ETAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_RAP_ETAT));
            }
            if ((Original_RAP_CONFIANCE == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_CONFIANCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_RAP_CONFIANCE));
            }
            if ((Original_RAP_BILAN == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_BILAN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_RAP_BILAN));
            }
            if ((Original_RAP_MOTIF == null)) {
                throw new global::System.ArgumentNullException("Original_RAP_MOTIF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_RAP_MOTIF));
            }
            if ((Original_RAP_MOTIFAUTRE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_RAP_MOTIFAUTRE));
            }
            if ((Original_RAP_NOMREMPL == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_RAP_NOMREMPL));
            }
            if ((Original_RAP_PNOMREMPL == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_RAP_PNOMREMPL));
            }
            if ((Original_RAP_MED1 == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_RAP_MED1));
            }
            if ((Original_RAP_MED2 == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_RAP_MED2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    short RAP_PRANUM, 
                    System.DateTime RAP_DATE, 
                    System.DateTime RAP_DATVISIT, 
                    string RAP_ETAT, 
                    string RAP_CONFIANCE, 
                    string RAP_BILAN, 
                    string RAP_MOTIF, 
                    string RAP_MOTIFAUTRE, 
                    string RAP_NOMREMPL, 
                    string RAP_PNOMREMPL, 
                    string RAP_MED1, 
                    string RAP_MED2, 
                    string Original_RAP_MATRICULE, 
                    int Original_RAP_NUM, 
                    short Original_RAP_PRANUM, 
                    System.DateTime Original_RAP_DATE, 
                    System.DateTime Original_RAP_DATVISIT, 
                    string Original_RAP_ETAT, 
                    string Original_RAP_CONFIANCE, 
                    string Original_RAP_BILAN, 
                    string Original_RAP_MOTIF, 
                    string Original_RAP_MOTIFAUTRE, 
                    string Original_RAP_NOMREMPL, 
                    string Original_RAP_PNOMREMPL, 
                    string Original_RAP_MED1, 
                    string Original_RAP_MED2) {
            return this.Update(Original_RAP_MATRICULE, Original_RAP_NUM, RAP_PRANUM, RAP_DATE, RAP_DATVISIT, RAP_ETAT, RAP_CONFIANCE, RAP_BILAN, RAP_MOTIF, RAP_MOTIFAUTRE, RAP_NOMREMPL, RAP_PNOMREMPL, RAP_MED1, RAP_MED2, Original_RAP_MATRICULE, Original_RAP_NUM, Original_RAP_PRANUM, Original_RAP_DATE, Original_RAP_DATVISIT, Original_RAP_ETAT, Original_RAP_CONFIANCE, Original_RAP_BILAN, Original_RAP_MOTIF, Original_RAP_MOTIFAUTRE, Original_RAP_NOMREMPL, Original_RAP_PNOMREMPL, Original_RAP_MED1, Original_RAP_MED2);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private RAPPORT_VISITETableAdapter _rAPPORT_VISITETableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public RAPPORT_VISITETableAdapter RAPPORT_VISITETableAdapter {
            get {
                return this._rAPPORT_VISITETableAdapter;
            }
            set {
                this._rAPPORT_VISITETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._rAPPORT_VISITETableAdapter != null) 
                            && (this._rAPPORT_VISITETableAdapter.Connection != null))) {
                    return this._rAPPORT_VISITETableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._rAPPORT_VISITETableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(GSB_Visite_JEANNETTEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._rAPPORT_VISITETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.RAPPORT_VISITE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rAPPORT_VISITETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(GSB_Visite_JEANNETTEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._rAPPORT_VISITETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.RAPPORT_VISITE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rAPPORT_VISITETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(GSB_Visite_JEANNETTEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._rAPPORT_VISITETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.RAPPORT_VISITE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rAPPORT_VISITETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(GSB_Visite_JEANNETTEDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._rAPPORT_VISITETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rAPPORT_VISITETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm" +
                        "e chaîne de connexion.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager ne contient pas d\'informations de connexion. Définissez chaqu" +
                        "e propriété TableAdapterManager TableAdapter à une instance valide de TableAdapt" +
                        "er.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transaction ne peut pas commencer. La connexion de données actuelle ne prend p" +
                        "as en charge les transactions ou l\'état actuel n\'autorise pas le début de la tra" +
                        "nsaction.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._rAPPORT_VISITETableAdapter != null)) {
                    revertConnections.Add(this._rAPPORT_VISITETableAdapter, this._rAPPORT_VISITETableAdapter.Connection);
                    this._rAPPORT_VISITETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._rAPPORT_VISITETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._rAPPORT_VISITETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rAPPORT_VISITETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rAPPORT_VISITETableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._rAPPORT_VISITETableAdapter != null)) {
                    this._rAPPORT_VISITETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._rAPPORT_VISITETableAdapter]));
                    this._rAPPORT_VISITETableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591